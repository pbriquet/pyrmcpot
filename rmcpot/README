RMCPOT ->		"Roberto's Monte Carlo for interatomic POTential derivation" is a Fortran 90 code that uses
			simulated annealing to obtain optmized parameters of interatomic potentials taking constraints 
			into account.

CONTROL INPUT FILES
-------------------

* pot.inp ->		The main control input file.

Additional control input files are the 'paramlist' files. If present, they change the behavior of the listed parameters 
during the fitting procedure. They are:

* paramlist1 ->		If the initial parameters were obtained from a 'paramset.dat' file, some parameters will 
			be kept unaltered during the fitting procedure if they are listed in this file. Its format
			follows:

index1
index2
index3
...
indexM

where each entry contains the parameter index. Parameters are ordered according to the potential type as defined 
in their corresponding generator routines. If this file does not exist or is empty, no parameter will be kept fixed.

* paramlist2 ->		In this file, the minimum and maximum values of the parameters can be specified. These can be
			soft or hard constraints. Its format follows:

index1 minvalue1 maxvalue1 hardconst1
index2 minvalue2 maxvalue2 hardconst2
index3 minvalue3 maxvalue3 hardconst3
...
indexM minvalueM maxvalueM hardconstM

where each entry contains a parameter index and the associated minimum and maximum values of the parameter, as well as a
logical value indicating if the constraints are hard or soft. If this file does not exist or is empty, all parameters will 
be unbounded, with no penalty, during the fitting procedure. This is also the case if some value is zero. If the index is 
equal to zero, the corresponding limits are applied to all parameters.

* paramlist3 ->		The initial maximum step size used by the simulated annealing algorithm is usually set by the 
			'inistepsize' variable and is the same for all parameters. In this file, it is possible to override
			the values of 'inistepsize', giving different values for the maximum step size in a per-parameter
			basis. The file format can be seen below:

index1 value1
index2 value2
index3 value3
...
indexM valueM

where each entry contains a pair of parameter index and the associated positive maximum step size. If the value is less than
or equal to zero, the default value set by 'inistepsize' is considered. This also applies to all parameters if the file does 
not exist or is empty. If the index is equal to zero (indeed, less than one), the corresponding limit is applied to all parameters.

MAIN INPUT FILES
----------------

Reference data ->	It must be provided in a single file named 'refdata.dat' with the following format:
		  
N
refdata1 weight1 rel1 quali1
refdata2 weight2 rel2 quali2
refdata3 weight3 rel3 quali3
...
refdataN weightN relN qualiN

where N is the number of reference data points. Each point has to be provided with its respective 
weight (for fitting purposes) in the next N lines. Additionally, the user has to tell the code 
whether the sign of the reference data has to be taken into account (.true.) or not (.false.) during 
the fitting procedure.

Potential data ->	Data generated by temptative versions of the interatomic potential during the fitting procedure 
			must be saved into a file named 'potdata.dat'. These data are generated by LAMMPS runs with 
			the temptative potential, taking the geometries used in the ab initio calculations as the input 
			coordinates. The format of 'potdata.dat' must be as follows:

potdata1
potdata2
potdata3
...
potdataN

where N is the same as above. In this file, each entry matches an entry in 'refdata.dat'. 
For instance, if refdata10 is the energy of a configuration as given by ab initio calculations, 
potdata10 is the energy of the same configuration, as given by the temptative version of the 
interatomic potential. Therefore, the user has to be careful about the order in which the LAMMPS 
scripts output the data.

EAM/ALLOY POTENTIALS
--------------------

Input variables ->	If potmodel='eam/alloy', the following section must be added to the file 'pot.inp':

&INPEAMALLOY
...
list of variables
...
/

The variables are:

eam_nel ->			Number of elements considered in the fitting procedure (maximum of 2; default is 1).
eam_el(MAXELEEAM) ->		Elements; array of type string of length 2 (e.g., 'Fe', 'Ni', etc; MAXELEEAM=2).
eam_anumber(MAXELEEAM) ->	Atomic number; array of type integer (e.g., 26, 29, etc; MAXELEEAM=2).
eam_existparams(MAXELEEAM) ->	Pre-existing data exist for these elements; array of type logical (.true. or .false.; MAXELEEAM=2).
eam_rhofile(MAXELEEAM) ->	Array with the name of pre-existing density data files; MAXELEEAM=2. Require eam_existparams(i)=.true.
				for the i-th element.
eam_embfile(MAXELEEAM) ->	Array with the name of pre-existing embedding data files; MAXELEEAM=2. Require eam_existparams(i)=.true.
				for the i-th element.
eam_pairfile(MAXELEEAM+1) ->	Array with the name of pre-existing pairwise data files; MAXELEEAM=2. Require eam_existparams(i)=.true.
				for the i-th element.
eam_struct(MAXELEEAM) ->	Crystalline structure; array of type string (e.g., 'bcc', 'fcc'; MAXELEEAM=2).
eam_a0(MAXELEEAM) ->		Lattice constant; array of type float (e.g., 2.86, 3.52; MAXELEEAM=2).
eam_nr ->
eam_nrho ->
eam_rhofunc ->
eam_pairfunc ->
eam_embfunc ->
eam_dr ->
eam_drho ->
eam_cut ->
eam_maxr(MAXR) ->
eam_amass(MAXELEEAM) ->
eam_maxpairpar ->
eam_maxrhopar ->
eam_innerpaircut(MAXPAIR) -> 

TERSOFF POTENTIALS
------------------

Input variables ->	If potmodel='tersoff', a file 'tersoff.inp' has to be provided. This file contains a section

&INPTERSOFF
...
list of variables
...
/

The variables are:

nel_ter ->		Number of elements considered in the fitting procedure (maximum of 3; default is 1).
el_ter(3) ->		Elements; string of length 2 (e.g., 'C', 'Si', 'O', etc).
existparams_ter(3) ->	Determine if the parameters of the i-th element are provided in 
			'tersoff.inp' (.true., see the next variable) or also fitted such that they
			reproduce the reference data (.false.; default).
iniparams_ter(3,13) ->	The values of the 13 parameters of each elemental interaction can be provided (default
			is zero). The parameterers are 
			(gamma, lambda3, c, d, costheta0, n, beta, lambda2, B, R, D, lambda1, A), 
			the meaning of which can be seen at
			http://lammps.sandia.gov/doc/pair_tersoff.html
